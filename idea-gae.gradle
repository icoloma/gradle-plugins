/**
  Copy compile dependencies to $webAppDirName/WEB-INF/lib
  Creates a intellij project with all dependencies that compiles classes into
  $webAppDirName/WEB-INF/classes and test classes into /build/test-classes.

  Also creates a runner to launch the server inside IDEA.

  Requires: gradle 1.3 or greater
*/

apply from: 'https://raw.github.com/icoloma/gradle-plugins/master/webinflib.gradle'
apply plugin: 'idea'

def createLauncher(launcherName, vars) {
  new XmlParser().parseText("""
    <configuration default="false" name="${launcherName}" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" />
      <option name="MAIN_CLASS_NAME" value="com.google.appengine.tools.development.DevAppServerMain" />
      <option name="VM_PARAMETERS" value="
        -ea 
        -javaagent:$System.env.APPENGINE_HOME/lib/agent/appengine-agent.jar 
        -Ddatastore.default_high_rep_job_policy_unapplied_job_pct=50 
        -Duser.timezone=UTC 
        -Dhostname=localhost:8888
        -Dappengine.sdk.root=$System.env.APPENGINE_HOME
        ${vars}
      " />
      <option name="PROGRAM_PARAMETERS" value="
        --port=${hasProperty('portNumber')? project.portNumber : 8888}
        --address=0.0.0.0
        war
      " />
      <option name="WORKING_DIRECTORY" value="file://\$PROJECT_DIR\$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" value="" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="${project.name}" />
      <envs>
        <env name="SDK_CONFIG" value="$System.env.APPENGINE_HOME/config/sdk" />
        <env name="SDK_LIB" value="$System.env.APPENGINE_HOME/lib" />
      </envs>
      <method />
    </configuration>
  """)
}

idea {

  // see http://gradle.org/docs/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
  module {
    inheritOutputDirs = false
    outputDir = file('war/WEB-INF/classes')
    testOutputDir = file('build/test-classes')
  }

  // see http://gradle.org/docs/current/dsl/org.gradle.plugins.ide.idea.model.IdeaWorkspace.html
  // added the GAE runner
  workspace {
    iws.withXml { provider ->
      def node = provider.asNode()

      // add Git as VCS
      node.children().add(0, new XmlParser().parseText('<component name="VcsDirectoryMappings"> <mapping directory="$PROJECT_DIR$" vcs="Git" /> </component>'));

      // add launcher for development and emulate production
      node.depthFirst().findAll { 
        if (it.name() == 'component' && it.attribute('name') == 'RunManager') {
          def c = it.children();
          c.add(0, createLauncher('gae-dev', ''))
          c.add(0, createLauncher('gae-prod', '-DgaeEnvironment=PRODUCTION -Dfile.encoding=iso8859-1'))
        }
      }
    }
  }

  project {
    ipr.withXml { provider ->
      // Get root node.
      def project = provider.asNode()

      def encoding = project.component.find { it.@name == 'Encoding' }

      if (encoding) {
          // Change existing node.
          encoding.@useUTFGuessing = true
          encoding.@native2AsciiForPropertiesFiles = false
          encoding.@defaultCharsetForPropertiesFiles = 'UTF-8'
          encoding.appendNode 'file', [url: 'file://$PROJECT_DIR$', charset: 'UTF-8']
      } else {
          // Create new node with default values.
          project.appendNode 'component', [name: 'Encoding', useUTFGuessing: true, native2AsciiForPropertiesFiles: false, defaultCharsetForPropertiesFiles: 'UTF-8']
      }
    }
  }
}

tasks.idea.dependsOn webinflib
